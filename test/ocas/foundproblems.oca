// Based on hawki, with ">" and a number
if DPR.CATG == "CALIB" and DPR.TECH == "IMAGE" and DPR.TYPE == "DARK"
  and INSTRUME like "%HAWKI%"
  and TPL.NEXP > 2 then
{
  RAW.TYPE = "DARK";
  REFLEX.CATG = "DARK";
}

// Based on fors1, with - signs, ., and MJD-OBS
if DPR.CATG == "CALIB" and DPR.TECH == "IMAGE" and DPR.TYPE == "DARK"
  and INSTRUME like "%HAWKI%"
  and MJD-OBS >= -.2
  and TPL.NEXP <= -.2 then
{
  RAW.TYPE = "DA-RK";
  REFLEX.CATG = "DARK";
}

// Based on amber_wkf, with , in value, and or
if (DPR.CATG=="CALIB") and DPR.TYPE=="WAVE,3TEL" and
   (TPL.ID like "%p2vm%" or TPL.ID like "%P2VM%") then
{
  RAW.TYPE="3P2V";
  DO.CATG="AMBER_3WAVE";
  PACK.DIR="P2VM";
  CATG="CALIB";
}

// Using a +
if PRO.PATG >= 4 + 1 - 2 then
{
  DO.PATG=PRI.PATG;
}


// Based on cr2re_wkf. Ensures that REFLEX.CATG is always set to something.
if (T) then
{
   REFLEX.CATG="UNDEFINED";
}

// Based on cr2re_wkf. Test on types
if PRO.SATG is string then
{
  REFLEX.SATG="ABCD";
}

// Based on cr2re_wkf. Use keyword as value.
if PRO.SATG == "QQ" then
{
  REFLEX.SATG=PRI.SATG;
}

// Based on efosc_spec, using !=
if INS.SLIT.NAME!="slit#5.0" then
{
  RAW.TYPE = "SCREEN";
}

// Based on efosc_spec, using #
if INS.SLIT.NAME=="slit#5.0" then
{
  RAW.TYPE = "SCREEN";
}

// Based on mime_fringe_wkf, with /
if INS.SLIT.NAME=="OMEGACAM/1.60" then
{
  RAW.TYPE = "SCREEN";
}

// Based on midi_HIGH_SENS_wkf
if PRO.CATG=="CALIB" then
{
  DO.CATG="CALIB";
  RAW.TYPE="";
}


//ORGANIZATION

// Based on HAWKI, with AS
select execute(SKY_FLATS) from rawFiles where RAW.TYPE=="FLAT_TWILIGHT"
  group by DET.NCORRS.NAME,DET.DIT,INS.FILT2.NAME,OBS.START as (TPL_A,tpl);

// Based on HAWKI, with AS
select execute(SKY_FLATS) from rawFiles where RAW.TYPE=="FLAT_TWILIGHT"
  group by DET.NCORRS.NAME,DET.DIT,INS.FILT2.NAME,OBS.START as (TPL_D,tpl);

// Based on giraf_wkf_grp_night, with different AS
select execute(SKY_FLATS) from rawFiles where RAW.TYPE=="FLAT_TWILIGHT"
  group by DET.NCORRS.NAME,DET.DIT,INS.FILT2.NAME,OBS.START as (TPL_A, grp);

// Based on HAWKI, without AS
select execute(NOISE_COMPUTATION) from inputFiles where
    RAW.TYPE == "DARK" and DET.NDIT==1 group by ARCFILE;

// Based on fors_imaging_wkf, with is undefined
select execute(NOISE_COMPUTATION) from inputFiles where
    RAW.TYPE is undefined;

// Based on fors_pmos_wkf, with space
select execute(NOISE_COMPUTATION) from inputFiles where
    RAW.TYPE == "Norma III";

// Based on kmos_wkf, minRet in select execute
// TODO: does this even make sense?
minRet=3;
select execute(DARK) from inputFiles where RAW.TYPE=="DARK"
    group by TPL.START ;




// Based on HAWKI, normal action
action DARKS
{
  minRet=0; maxRet=1;
  select file as REFERENCE_DARK from inputFiles where
    REFLEX.CATG=="REFERENCE_DARK"
    and inputFile.DET.DIT==DET.DIT
    and inputFile.DET.NDIT==DET.NDIT
    and inputFile.DET.NCORRS.NAME==DET.NCORRS.NAME;

  recipe hawki_dark_combine;

  product MASTER_DARK { PRO.CATG="MASTER_DARK";}
  product DIFFIMG_DARK { PRO.CATG="DIFFIMG_DARK";}
  product DIFFIMG_STATS_DARK { PRO.CATG="DIFFIMG_STATS_DARK";}

}

// Based on vimos-casu, many parenthesis, inputFile.MJD-OBS
action BIAS {
  // select correct reference bias (old or new chips based on MJD)
  minRet=0; maxRet=1;
  select file as REFERENCE_BIAS from inputFiles where
    REFLEX.CATG=="REFERENCE_BIAS"
    and ( ( (MJD-OBS <= 55378.0) and (inputFile.MJD-OBS <= 55378.0) ) or
          ( (MJD-OBS > 55378.0) and (inputFile.MJD-OBS > 55378.0) ));
  recipe bias;
}

// Based on vimos_ifu_wkf, with ?=
action SCI_IFU
{
  minRet = 1; maxRet = 1;
  select file as IFU_IDS from calibFiles where
  PRO.CATG=="IFU_IDS" and ( inputFile.INS.FILT1.NAME?=INS.FILT1.NAME
    and inputFile.INS.FILT2.NAME?=INS.FILT2.NAME
     ) and ( inputFile.INS.GRIS1.ID?=INS.GRIS1.ID
     and inputFile.INS.GRIS2.ID?=INS.GRIS2.ID )
  ;

  recipe science;
}


// Based on giraf_wkf, different order
action DARKS
{
  minRet=0; maxRet=1;
  select file as REFERENCE_DARK from inputFiles where
    REFLEX.CATG=="REFERENCE_DARK";

  product MASTER_DARK { PRO.CATG="MASTER_DARK";}

  recipe hawki_dark_combine;
}

// Based on 4most_wkf, has a "." in a value, and no inputselection
action ACTION_CALIB_IMG
{

recipe rrrecipe_calib;
product IMG_CALIBRATED {
    REFLEX.CATG = "IMG_CALIBRATED";
    PRO.CATG = "IMG_CALIBRATED";
    PRO.EXT="tpl_0000.fits";}
}

// Based on amber_wkf, equation in selection.
// TODO: Support
action ACTION_SCIENCE_FRINGE
{
  minRet=1; maxRet=1;
  select file as P2VM_REDUCED from calibFiles where
    DO.CATG=="P2VM_REDUCED"
//    and (inputFile.MJD-OBS - MJD-OBS) < 0.30 and (inputFile.MJD-OBS - MJD-OBS) > 0.0
  ;

 recipe amber_SciCal ;
  product SCIENCE_REDUCED { PRO.CATG="SCIENCE_REDUCED"; }
}

// Based on amber_wkf, uses parameters.
action ACTION_SCIENCE_FRINGE
{
  minRet=1; maxRet=1;
  select file as P2VM_REDUCED from calibFiles where
    DO.CATG=="P2VM_REDUCED";

  recipe amber_SciCal { "--binning=1"; "--select=FALSE"; }
  product SCIENCE_REDUCED { PRO.CATG="SCIENCE_REDUCED"; }
}

// Based on eris_nix_basic.oca, no minRet and maxRet
action ACTION_SCIENCE
{
  select file as GAIN from calibFiles where
    REFLEX.CATG=="GAIN";
  recipe abcd;
}


// Based on IFS, only minRet
action ACTION_SCIENCE
{
  minRet=2;
  select file as GAIN from calibFiles where
    REFLEX.CATG=="GAIN";
  recipe abcd;
}
